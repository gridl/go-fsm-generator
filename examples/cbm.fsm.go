package examples

// Generated by fsm-generator. DO NOT EDIT.

//+++ General machine definition +++

type CBMState int

const (
	_ CBMState = iota
	Closed
	HalfOpened
	Opened
	Terminal
)

var _CBMStateMap = map[CBMState]string{
	Closed:     "Closed",
	HalfOpened: "HalfOpened",
	Opened:     "Opened",
	Terminal:   "Terminal",
}

func (s CBMState) String() string {
	return _CBMStateMap[s]
}

type CBMBehaviour interface {
	CBMClosedState
	CBMHalfOpenedState
	CBMOpenedState
}

type CBM struct {
	state CBMState
}

func (m *CBM) Current() CBMState {
	return m.state
}

func (m *CBM) Operate(operator CBMBehaviour) {
	for {
		switch m.state {
		case Closed:
			m.handleClosedEvent(operator.OperateClosed())
		case HalfOpened:
			m.handleHalfOpenedEvent(operator.OperateHalfOpened())
		case Opened:
			m.handleOpenedEvent(operator.OperateOpened())
		case Terminal:
			return
		}
	}
}

func (m *CBM) Visualize() string {
	return "//Graphviz format \n" +
		"digraph CBM{\n" +
		"Closed -> Terminal [label=Error];\n" +
		"Closed -> Opened [label=Failure];\n" +
		"Closed -> Terminal [label=Panic];\n" +
		"HalfOpened -> Opened [label=Failure];\n" +
		"HalfOpened -> Closed [label=Success];\n" +
		"Opened -> HalfOpened [label=Try];\n" +
		"Terminal [shape=Msquare];\n" +
		"}\n"
}

// Handlers for state transitions

func (m *CBM) handleClosedEvent(event CBMClosedEvent) {
	switch event {
	case ClosedError:
		m.state = Terminal
	case ClosedFailure:
		m.state = Opened
	case ClosedPanic:
		m.state = Terminal
	case ClosedNoop:
	}
}

func (m *CBM) handleHalfOpenedEvent(event CBMHalfOpenedEvent) {
	switch event {
	case HalfOpenedFailure:
		m.state = Opened
	case HalfOpenedSuccess:
		m.state = Closed
	case HalfOpenedNoop:
	}
}

func (m *CBM) handleOpenedEvent(event CBMOpenedEvent) {
	switch event {
	case OpenedTry:
		m.state = HalfOpened
	case OpenedNoop:
	}
}

//--- Here we will define all events ---

//=== CBMClosedEvent definition ===

type CBMClosedEvent int

const (
	_ CBMClosedEvent = iota
	ClosedError
	ClosedFailure
	ClosedPanic
	ClosedNoop
)

var _CBMClosedEventMap = map[CBMClosedEvent]string{
	ClosedError:   "ClosedError",
	ClosedFailure: "ClosedFailure",
	ClosedPanic:   "ClosedPanic",
	ClosedNoop:    "ClosedNoop",
}

func (m CBMClosedEvent) String() string {
	return _CBMClosedEventMap[m]
}

type CBMClosedState interface {
	OperateClosed() CBMClosedEvent
}

//=== CBMHalfOpenedEvent definition ===

type CBMHalfOpenedEvent int

const (
	_ CBMHalfOpenedEvent = iota
	HalfOpenedFailure
	HalfOpenedSuccess
	HalfOpenedNoop
)

var _CBMHalfOpenedEventMap = map[CBMHalfOpenedEvent]string{
	HalfOpenedFailure: "HalfOpenedFailure",
	HalfOpenedSuccess: "HalfOpenedSuccess",
	HalfOpenedNoop:    "HalfOpenedNoop",
}

func (m CBMHalfOpenedEvent) String() string {
	return _CBMHalfOpenedEventMap[m]
}

type CBMHalfOpenedState interface {
	OperateHalfOpened() CBMHalfOpenedEvent
}

//=== CBMOpenedEvent definition ===

type CBMOpenedEvent int

const (
	_ CBMOpenedEvent = iota
	OpenedTry
	OpenedNoop
)

var _CBMOpenedEventMap = map[CBMOpenedEvent]string{
	OpenedTry:  "OpenedTry",
	OpenedNoop: "OpenedNoop",
}

func (m CBMOpenedEvent) String() string {
	return _CBMOpenedEventMap[m]
}

type CBMOpenedState interface {
	OperateOpened() CBMOpenedEvent
}
