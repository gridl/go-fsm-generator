package examples

import "fmt"

// Generated by go-fsm-generator. DO NOT EDIT.

//+++ General machine definition +++

// States of CBM
type CBMState int

const (
	_          CBMState = iota
	Closed              // Closed state
	Exit                // Exit state
	HalfOpened          // HalfOpened state
	Opened              // Opened state
)

var _CBMStateMap = map[CBMState]string{
	Closed:     "Closed",
	Exit:       "Exit",
	HalfOpened: "HalfOpened",
	Opened:     "Opened",
}

var _CBMParsingStateMap = map[string]CBMState{
	"Closed":     Closed,
	"Exit":       Exit,
	"HalfOpened": HalfOpened,
	"Opened":     Opened,
}

func (s CBMState) String() string {
	return _CBMStateMap[s]
}

// Behaviours of CBM machine
type CBMBehaviour interface {
	CBMClosedState

	CBMHalfOpenedState
	CBMOpenedState
}

// CBM machine type
type CBM struct {
	state CBMState
}

// Factory for CBM machine
func NewCBM(state CBMState) *CBM {
	return &CBM{state: state}
}

// Use it to deserialize CBM machine state
func NewCBMFromString(stateStr string) (*CBM, error) {
	state, ok := _CBMParsingStateMap[stateStr]
	if !ok {
		return nil, fmt.Errorf("state unknown for CBM: %s", stateStr)
	}
	return &CBM{state: state}, nil
}

// Get current state of CBM
func (m *CBM) Current() CBMState {
	return m.state
}

// Execute behaviour for the current state CBM
func (m *CBM) Operate(operator CBMBehaviour) {
	switch m.state {
	case Closed:
		m.handleClosedEvent(operator.OperateClosed())
	case Exit:
		return
	case HalfOpened:
		m.handleHalfOpenedEvent(operator.OperateHalfOpened())
	case Opened:
		m.handleOpenedEvent(operator.OperateOpened())
	}
}

// Visualize states and events for CBM in Graphviz format
func (m *CBM) Visualize() string {
	return `// Definition for CBM in Graphviz format 
digraph CBM {
	Closed -> Opened [label=Error];
	Closed -> Exit [label=Panic];
	Exit [shape=Msquare];
	HalfOpened -> Opened [label=Failure];
	HalfOpened -> Exit [label=Panic];
	HalfOpened -> Closed [label=Success];
	Opened -> HalfOpened [label=Try];
}
`
}

// Handlers for state transitions

func (m *CBM) handleClosedEvent(event CBMClosedEvent) {
	switch event {
	case ClosedError:
		m.state = Opened
	case ClosedPanic:
		m.state = Exit
	case ClosedNoop:
	}
}

func (m *CBM) handleHalfOpenedEvent(event CBMHalfOpenedEvent) {
	switch event {
	case HalfOpenedFailure:
		m.state = Opened
	case HalfOpenedPanic:
		m.state = Exit
	case HalfOpenedSuccess:
		m.state = Closed
	case HalfOpenedNoop:
	}
}

func (m *CBM) handleOpenedEvent(event CBMOpenedEvent) {
	switch event {
	case OpenedTry:
		m.state = HalfOpened
	case OpenedNoop:
	}
}

//--- Here we will define all events ---

//=== CBMClosedEvent definition ===

// CBMClosedEvent definition
type CBMClosedEvent int

const (
	_           CBMClosedEvent = iota
	ClosedError                // ClosedError -> Opened
	ClosedPanic                // ClosedPanic -> Exit
	ClosedNoop                 // remain in Closed
)

var _CBMClosedEventMap = map[CBMClosedEvent]string{
	ClosedError: "ClosedError",
	ClosedPanic: "ClosedPanic",
	ClosedNoop:  "ClosedNoop",
}

func (m CBMClosedEvent) String() string {
	return _CBMClosedEventMap[m]
}

// Closed behaviour
type CBMClosedState interface {
	OperateClosed() CBMClosedEvent
}

//=== CBMHalfOpenedEvent definition ===

// CBMHalfOpenedEvent definition
type CBMHalfOpenedEvent int

const (
	_                 CBMHalfOpenedEvent = iota
	HalfOpenedFailure                    // HalfOpenedFailure -> Opened
	HalfOpenedPanic                      // HalfOpenedPanic -> Exit
	HalfOpenedSuccess                    // HalfOpenedSuccess -> Closed
	HalfOpenedNoop                       // remain in HalfOpened
)

var _CBMHalfOpenedEventMap = map[CBMHalfOpenedEvent]string{
	HalfOpenedFailure: "HalfOpenedFailure",
	HalfOpenedPanic:   "HalfOpenedPanic",
	HalfOpenedSuccess: "HalfOpenedSuccess",
	HalfOpenedNoop:    "HalfOpenedNoop",
}

func (m CBMHalfOpenedEvent) String() string {
	return _CBMHalfOpenedEventMap[m]
}

// HalfOpened behaviour
type CBMHalfOpenedState interface {
	OperateHalfOpened() CBMHalfOpenedEvent
}

//=== CBMOpenedEvent definition ===

// CBMOpenedEvent definition
type CBMOpenedEvent int

const (
	_          CBMOpenedEvent = iota
	OpenedTry                 // OpenedTry -> HalfOpened
	OpenedNoop                // remain in Opened
)

var _CBMOpenedEventMap = map[CBMOpenedEvent]string{
	OpenedTry:  "OpenedTry",
	OpenedNoop: "OpenedNoop",
}

func (m CBMOpenedEvent) String() string {
	return _CBMOpenedEventMap[m]
}

// Opened behaviour
type CBMOpenedState interface {
	OperateOpened() CBMOpenedEvent
}
