package testdata

import "fmt"

// Generated by go-fsm-generator. DO NOT EDIT.

//+++ General machine definition +++

// SomeState type definition
type SomeState int

const (
	_      SomeState = iota
	First            // First state
	Fourth           // Fourth state
	Second           // Second state
	Third            // Third state
)

var _SomeStateMap = map[SomeState]string{
	First:  "First",
	Fourth: "Fourth",
	Second: "Second",
	Third:  "Third",
}

var _SomeParsingStateMap = map[string]SomeState{
	"First":  First,
	"Fourth": Fourth,
	"Second": Second,
	"Third":  Third,
}

func (s SomeState) String() string {
	return _SomeStateMap[s]
}

// SomeBehaviour definition
type SomeBehaviour interface {
	SomeFirstState

	SomeSecondState
	SomeThirdState
}

// Some machine type
type Some struct {
	state SomeState
}

// NewSome creates machine with specified initial state
func NewSome(state SomeState) *Some {
	return &Some{state: state}
}

// NewSomeFromString can be used to deserialize  machine state
func NewSomeFromString(stateStr string) (*Some, error) {
	state, ok := _SomeParsingStateMap[stateStr]
	if !ok {
		return nil, fmt.Errorf("state unknown for Some: %s", stateStr)
	}
	return &Some{state: state}, nil
}

// Current returns current state of Some
func (m *Some) Current() SomeState {
	return m.state
}

// Operate executes behaviour for the current state Some
func (m *Some) Operate(operator SomeBehaviour) {
	switch m.state {
	case First:
		m.handleFirstEvent(operator.OperateFirst())
	case Fourth:
		return
	case Second:
		m.handleSecondEvent(operator.OperateSecond())
	case Third:
		m.handleThirdEvent(operator.OperateThird())
	}
}

// Visualize states and events for Some in Graphviz format
func (m *Some) Visualize() string {
	return `// Definition for Some in Graphviz format 
digraph Some {
	First -> Second [label=Aa];
	Fourth [shape=Msquare];
	Second -> Third [label=Bb];
	Second -> First [label=Cc];
	Second -> Fourth [label=Zz];
	Third -> First [label=Dd];
	Third -> Fourth [label=Zz];
}
`
}

// Handlers for state transitions

func (m *Some) handleFirstEvent(event SomeFirstEvent) {
	switch event {
	case FirstAa:
		m.state = Second
	case FirstNoop:
	}
}

func (m *Some) handleSecondEvent(event SomeSecondEvent) {
	switch event {
	case SecondBb:
		m.state = Third
	case SecondCc:
		m.state = First
	case SecondZz:
		m.state = Fourth
	case SecondNoop:
	}
}

func (m *Some) handleThirdEvent(event SomeThirdEvent) {
	switch event {
	case ThirdDd:
		m.state = First
	case ThirdZz:
		m.state = Fourth
	case ThirdNoop:
	}
}

//--- Here we will define all events ---

//=== SomeFirstEvent definition ===

// SomeFirstEvent definition
type SomeFirstEvent int

const (
	_         SomeFirstEvent = iota
	FirstAa                  // FirstAa -> Second
	FirstNoop                // remain in First
)

var _SomeFirstEventMap = map[SomeFirstEvent]string{
	FirstAa:   "FirstAa",
	FirstNoop: "FirstNoop",
}

func (m SomeFirstEvent) String() string {
	return _SomeFirstEventMap[m]
}

// SomeFirstState behaviour
type SomeFirstState interface {
	OperateFirst() SomeFirstEvent
}

//=== SomeSecondEvent definition ===

// SomeSecondEvent definition
type SomeSecondEvent int

const (
	_          SomeSecondEvent = iota
	SecondBb                   // SecondBb -> Third
	SecondCc                   // SecondCc -> First
	SecondZz                   // SecondZz -> Fourth
	SecondNoop                 // remain in Second
)

var _SomeSecondEventMap = map[SomeSecondEvent]string{
	SecondBb:   "SecondBb",
	SecondCc:   "SecondCc",
	SecondZz:   "SecondZz",
	SecondNoop: "SecondNoop",
}

func (m SomeSecondEvent) String() string {
	return _SomeSecondEventMap[m]
}

// SomeSecondState behaviour
type SomeSecondState interface {
	OperateSecond() SomeSecondEvent
}

//=== SomeThirdEvent definition ===

// SomeThirdEvent definition
type SomeThirdEvent int

const (
	_         SomeThirdEvent = iota
	ThirdDd                  // ThirdDd -> First
	ThirdZz                  // ThirdZz -> Fourth
	ThirdNoop                // remain in Third
)

var _SomeThirdEventMap = map[SomeThirdEvent]string{
	ThirdDd:   "ThirdDd",
	ThirdZz:   "ThirdZz",
	ThirdNoop: "ThirdNoop",
}

func (m SomeThirdEvent) String() string {
	return _SomeThirdEventMap[m]
}

// SomeThirdState behaviour
type SomeThirdState interface {
	OperateThird() SomeThirdEvent
}
